{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["QuizQuestion","this","props","question","answers","map","v","i","className","onClick","nextQuestion","correct","type","key","value","text","React","Component","TitlePage","state","titleText","counter","currentState","currentQuestion","score","timeLimit","console","log","timer","setInterval","countdown","setState","questions","length","clearInterval","start","possibleAnswers","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"q+CAUMA,E,iLACM,IAAD,OACP,OAAO,oCACL,4BAAKC,KAAKC,MAAMC,UACfF,KAAKC,MAAME,QAAQC,KAAI,SAACC,EAAGC,GAAJ,OACxB,2BAAOC,UAAU,eAAeC,QAAS,kBAAM,EAAKP,MAAMQ,aAAaJ,EAAEK,UAAUC,KAAK,SAASC,IAAKN,EAAGO,MAAOR,EAAES,e,GAL7FC,IAAMC,WAU3BC,E,YACJ,WAAYhB,GAAO,IAAD,8BAChB,4CAAMA,KACDiB,MAAO,CACVC,UAAW,uBACXC,QAAS,EACTC,aAtBc,EAuBdC,gBAAiB,EACjBC,MAAO,GAET,EAAKC,UAxBU,EAeC,E,0EAWLd,GAAS,IAAD,OACnBe,QAAQC,IAAI,kBACZ1B,KAAK2B,MAAQC,aAAY,kBAAM,EAAKC,cAAa,KAC9CnB,GACDV,KAAK8B,SAAS,CAACP,MAAOvB,KAAKkB,MAAMK,MAAM,IAEtCvB,KAAKkB,MAAMI,kBAAoBS,EAAUC,OAAQ,GAClDP,QAAQC,IAAI,QACZ1B,KAAK8B,SAAS,CACZX,UAAW,eACXE,aAnCY,EAoCZE,MAAOvB,KAAKkB,MAAMK,UAGpBU,cAAcjC,KAAK2B,OACnBF,QAAQC,IAAI1B,KAAKkB,MAAMI,iBACvBtB,KAAK8B,SAAS,CACZX,UAAU,eACVE,aA7Ce,EA8CfC,gBAAgBtB,KAAKkB,MAAMI,gBAAiB,O,kCAItC,IAAD,OACTG,QAAQC,IAAI,qBACZD,QAAQC,IAAI1B,KAAKkB,MAAME,SACpBpB,KAAKkB,MAAME,QAAUpB,KAAKwB,UAC3BxB,KAAK8B,SAAS,CACZX,UAAW,qBACXC,QAASpB,KAAKkB,MAAME,QAAS,KAG/BpB,KAAK8B,SAAS,CACZX,UAAW,kBACXE,aA7De,EA8DfD,QAAS,IA/DG,IAiEXpB,KAAKkB,MAAMG,cACZrB,KAAK2B,MAAQC,aAAY,kBAAM,EAAKC,cAAa,KACjDI,cAAcjC,KAAK2B,QAEnB3B,KAAK8B,SAAS,CAACX,UAAU,qB,8BAIvB,IAAD,OACLM,QAAQC,IAAI,aACZ1B,KAAK8B,SAAS,CAACX,UAAW,qBAAsBC,QAAQ,IACxDpB,KAAK2B,MAAQC,aAAY,kBAAM,EAAKC,cAAa,O,+BAGzC,IAAD,OACP,OACE,oCACE,2BAAI7B,KAAKwB,UAAYxB,KAAKkB,MAAME,SAlFpB,IAmFTpB,KAAKkB,MAAMG,aACd,oCACA,4BAAKrB,KAAKkB,MAAMC,WAChB,2BAAOZ,UAAU,QAAQI,KAAK,SAASE,MAAM,QAAQL,QAAS,kBAAI,EAAK0B,YAGvE,kBAAC,EAAD,CAAc/B,QAAS4B,EAAU/B,KAAKkB,MAAMI,iBAAiBa,gBAAiBjC,SAC7E6B,EAAU/B,KAAKkB,MAAMI,iBAAiBpB,SAAUO,aAAc,SAACC,GAAD,OAAa,EAAKD,aAAaC,MAE9F,qCAAWV,KAAKkB,MAAMK,Y,GA5ENR,IAAMC,WAyFfoB,MARf,WACE,OACE,yBAAK7B,UAAU,OACb,kBAAC,EAAD,QC5Fc8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.1c7d121f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport questions from './questions.json'\r\n\r\nconst TITLE_STATE = 0\r\nconst QUESTION_STATE = 1\r\nconst TIME_LIMIT = 5\r\nconst FINAL_STATE = 2\r\n\r\n\r\nclass QuizQuestion extends React.Component {\r\n  render() {\r\n    return <>\r\n      <h1>{this.props.question}</h1>\r\n      {this.props.answers.map((v, i) => \r\n      <input className=\"answerButton\" onClick={() => this.props.nextQuestion(v.correct)} type=\"button\" key={i} value={v.text}/>)}\r\n      </>\r\n  }\r\n}\r\n\r\nclass TitlePage extends React.Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state ={\r\n      titleText: \"Welcome to Quizie!!!\",\r\n      counter: 0,\r\n      currentState: TITLE_STATE,\r\n      currentQuestion: 0,\r\n      score: 0\r\n    }\r\n    this.timeLimit = TIME_LIMIT\r\n  }\r\n  nextQuestion(correct){\r\n    console.log(\"BUTTON PRESSED\")\r\n    this.timer = setInterval(() => this.countdown(), 1000)\r\n    if(correct){\r\n      this.setState({score: this.state.score+1})\r\n    }\r\n    if(this.state.currentQuestion === questions.length -1){\r\n      console.log(\"DONE\")\r\n      this.setState({\r\n        titleText: 'Restart Quiz',\r\n        currentState: FINAL_STATE,\r\n        score: this.state.score\r\n      })\r\n    } else{\r\n      clearInterval(this.timer)\r\n      console.log(this.state.currentQuestion)  \r\n      this.setState({\r\n        titleText:\"You answer X\",\r\n        currentState: QUESTION_STATE,\r\n        currentQuestion:this.state.currentQuestion +1\r\n      })\r\n    }\r\n  }\r\n  countdown(){\r\n    console.log(\"Handling interval\")\r\n    console.log(this.state.counter)\r\n    if(this.state.counter < this.timeLimit){\r\n      this.setState({\r\n        titleText: 'Starting the Quiz!',\r\n        counter: this.state.counter +1\r\n      })\r\n    }else{\r\n      this.setState({\r\n        titleText: \"Beginning Quiz!\",\r\n        currentState: QUESTION_STATE,\r\n        counter: 0\r\n      })\r\n      if(this.state.currentState === TITLE_STATE){\r\n        this.timer = setInterval(() => this.countdown(), 1000)\r\n        clearInterval(this.timer)\r\n      } else {\r\n        this.setState({titleText:\"You answered!\"})\r\n      }\r\n    }\r\n  }\r\n  start(){\r\n    console.log(\"Starting!\")\r\n    this.setState({titleText: \"Starting the Quiz!\", counter:0})\r\n    this.timer = setInterval(() => this.countdown(), 1000)\r\n  }\r\n  \r\n  render() {\r\n    return(\r\n      <>\r\n        <p>{this.timeLimit - this.state.counter}</p>\r\n        {((this.state.currentState === TITLE_STATE) ?\r\n        <>\r\n        <h2>{this.state.titleText}</h2>\r\n        <input className=\"start\" type=\"button\" value=\"start\" onClick={()=>this.start()} />\r\n        </>\r\n        :\r\n        <QuizQuestion answers={questions[this.state.currentQuestion].possibleAnswers} question=\r\n        {questions[this.state.currentQuestion].question} nextQuestion={(correct) => this.nextQuestion(correct)}\r\n        ></QuizQuestion>)}\r\n        <p>Score: {this.state.score}</p>\r\n      </>)\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <TitlePage></TitlePage>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}